package ru.sberdyshev.learn.geekbrains.java.core.professional.lesson3.homework.processor.file;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.*;

import static org.junit.Assert.assertEquals;

public class FileProcessorReadHugeFileByPagesMethodTest {
    private final String rootPath = "C:\\Users\\SBerdyshev\\IdeaProjects\\geekBrainsJavaCoreProfessional\\src\\main\\resources\\";
    private final String hugeFilePath = rootPath + "ru.sberdyshev\\learn.geekbrains.java.core.professional.lesson3.homework\\task1\\testHugeFile.txt";
    private final String pageFilledWith
    private final String pageFilledWith
    private final String pageFilledWith3 = "333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333";

//    private final String rootPath = null;
//    private final String hugeFilePath = rootPath + null;
//    private final String pageFilledWith1 = null;
//    private final String pageFilledWith2 = null;
//    private final String pageFilledWith3 = null;

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final ByteArrayOutputStream errContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;
    private final PrintStream originalErr = System.err;

    @Before
    public void generateHugeFile() throws IOException {
        File hugeFile = new File(hugeFilePath);
        if (!hugeFile.exists()) {
            try {
                hugeFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else if (hugeFile.exists() && hugeFile.isFile()) {
            hugeFile.delete();
            hugeFile.createNewFile();
        }
        OutputStream os = new BufferedOutputStream(new FileOutputStream(hugeFilePath));
        int sizeInMB = 10;
        int pageSizeInByte = 1800;
        int maxPages = (sizeInMB * 1024 * 1024) / pageSizeInByte + 1;
        for (int pageNumber = 0; pageNumber < maxPages; pageNumber++) {
            if (pageNumber < maxPages / 3) {
                os.write(pageFilledWith1.getBytes());
            }
            if (pageNumber >= maxPages / 3 && pageNumber < (2 * maxPages) / 3) {
                os.write(pageFilledWith2.getBytes());
            }
            if (pageNumber >= (2 * maxPages) / 3) {
                os.write(pageFilledWith3.getBytes());
            }
        }
    }

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
        System.setErr(new PrintStream(errContent));
    }

    @After
    public void restoreStreams() {
        System.setOut(originalOut);
        System.setErr(originalErr);
    }

    @After
    public void deleteHugeFile() {
        File hugeFile = new File(hugeFilePath);
        if (hugeFile.exists() && hugeFile.isFile()) {
            hugeFile.delete();
        }
    }

    @Test
    public void readHugeFileByPagesPage1() throws IOException {
        final String expectedResult = pageFilledWith1;

        char[] result = FileProcessor.readHugeFileByPage(hugeFilePath, 1);

        assertEquals(expectedResult, new String(result));
    }

    @Test
    public void readHugeFileByPagesPageInTheMiddle() {
        final String expectedResult = pageFilledWith2;

        char[] result = FileProcessor.readHugeFileByPage(hugeFilePath, 3000);

        assertEquals(expectedResult, new String(result));
    }

    @Test
    public void readHugeFileByPagesPageInTheEnd() {
        final String expectedResult = pageFilledWith3;

        char[] result = FileProcessor.readHugeFileByPage(hugeFilePath, 5000);

        assertEquals(expectedResult, new String(result));
    }

    @Test
    public void readHugeFileByPagesNullFileName() {
        final String expectedResult = "Имя файла не заполненно";

        try {
            FileProcessor.readHugeFileByPage(null, 1);
        } catch (IllegalArgumentException e) {
            System.out.print(e.getLocalizedMessage());
        }

        assertEquals(expectedResult, outContent.toString());
    }

    @Test
    public void readHugeFileByPagesNotExistedFile() {
        final char[] expectedResult = null;

        char[] result = FileProcessor.readHugeFileByPage("fileX", 1);

        assertEquals(expectedResult, result);
    }

    @Test
    public void readHugeFileByPagesPageNumberTooFar() {
        final String expectedResult = "Слишком большой номер страницы";

        try {
            FileProcessor.readHugeFileByPage(hugeFilePath, 999999999);
        } catch (IllegalArgumentException e) {
            System.out.print(e.getLocalizedMessage());
        }

        assertEquals(expectedResult, outContent.toString());
    }

    @Test
    public void readHugeFileByPagesPageNumberNegative() {
        final String expectedResult = "Номер страницы не может быть меньше 1";

        try {
            FileProcessor.readHugeFileByPage(hugeFilePath, -1);
        } catch (IllegalArgumentException e) {
            System.out.print(e.getLocalizedMessage());
        }

        assertEquals(expectedResult, outContent.toString());
    }

    @Test
    public void readHugeFileByPagesPageNumberZero() {
        final String expectedResult = "Номер страницы не может быть меньше 1";

        try {
            FileProcessor.readHugeFileByPage(hugeFilePath, 0);
        } catch (IllegalArgumentException e) {
            System.out.print(e.getLocalizedMessage());
        }

        assertEquals(expectedResult, outContent.toString());
    }
}
